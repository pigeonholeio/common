---
openapi: 3.0.0
info:
  title: PigeonHole API
  description: API for Pigeonhole services.
  version: 1.0.0
servers:
  - description: Production server (uses live data)
    url: https://api.pigeonhole.io
  - description: Localhost Dev
    url: http://localhost:3000
tags:
  - description: Everything relating to the User
    name: user
  - description: Everything relating to the user auth
    name: auth
x-common-objects:
  commonResponses: &commonResponse
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/GeneralMessageResponse'
            type: array
      description: An array of User objects
    # $ref: '#/components/responses/Secrets'
    # description: Successfully retrieved items
    # $ref: '#/components//GeneralMessageResponse'
  commonResonseErrors: &commonErrors
    '401': *commonResponse
    '403': *commonResponse
    '500': *commonResponse
  
components:
  responses:
    CreateSecretResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateSecretResponse'
      description: A Secret object
    Secret:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Secret'
      description: A Secret object
    Key:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Key'
      description: A Key object
    Keys:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Key'
            type: array
      description: An array of Key objects
    Secrets:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Secret'
            type: array
      description: An array of User objects
    GeneralMessageWithOIDCProvidersResponse:
      description: General Message Response
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/GeneralMessageResponse'
            - type: object
              properties:
                oidcProviders:
                  type: array
                  items:
                    $ref: '#/components/schemas/OIDCProvider'
            - type: object
              properties:
                default:
                  type: string
    GeneralResponseWithKeys:
      description: General Message Response
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/GeneralMessageResponse'
            - type: object
              properties:
                keys:
                  type: array
                  items:
                    $ref: '#/components/schemas/Key'
    GeneralMessageWithUserResponse:
      description: General Message Response
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/GeneralMessageResponse'
            - type: object
              properties:
                user:
                  $ref: '#/components/schemas/User'

            # $ref: '#/components/schemas/GeneralResponse'

          # schema:
          #   $ref: '#/components/schemas/GeneralMessageWithUserResponse'
    Token:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Token'
      description: A token response
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      description: A User object
    Users:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/User'
            type: array
      description: An array of User objects
  schemas:
    GeneralMessageWithUserResponse:
      type: object
      properties:
        fields:
          type: object
          properties:
            message:
              type: string
            user:
              $ref: '#/components/schemas/User'

    OIDCProvider:
      type: object
      properties:
        name:
          type: string
          nullable: false
        deviceEndpoint:
          type: string
          nullable: false
        clientID:
          type: string
          nullable: false
        tokenHandlerEndpoint:
          type: string
          nullable: false
        
    CreateSecretResponse:
      type: object
      properties:
        s3_info:
          type: object
          properties:
            fields:
              type: object
              properties:
                key:
                  type: string
                policy:
                  type: string
                x-amz-algorithm:
                  type: string
                x-amz-credential:
                  type: string
                x-amz-date:
                  type: string
                x-amz-meta-recipient_ids:
                  type: array
                  items:
                    type: string
                x-amz-meta-sender_id:
                  type: string
                x-amz-meta-reference:
                  type: string
                x-amz-signature:
                  type: string
            url:
              type: string
              format: uri
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    CreateSecret:
      properties:
        recipient_ids:
          description: A list of recipient IDs.
          items:
            type: string
          type: array
        reference:
          description: A reference string for the secret.
          type: string
      required:
        - recipient_ids
        - reference
      type: object
    NewKey:
      properties:
        key_data:
          type: string
        thumbprint:
          type: string
        only:
          type: boolean
          default: false
        force:
          type: boolean
          default: false
        reference:
          type: string
    Key:
      properties:
        reference:
          type: string
        created_at:
          type: string
        id:
          format: uuid
          type: string
        thumbprint:
          type: string
        key_data:
          type: string
      required:
        - tenant
        - key
      type: object
    Secret:
      properties:
        # id:
        #   format: uuid
        #   type: string
        reference:
          type: string
        recipient:
          type: string
        sender:
          type: string
        sent_at:
          type: string
        size:
          type: string
      type: object
    Tenant:
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        ref:
          type: string
      required:
        - name
        - ref
      type: object
    Token:
      properties:
        accessToken:
          type: string
      required:
        - accessToken
      type: object
    User:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/Key'
        email:
          type: string
        id:
          format: uuid
          type: string
        shortcode:
          type: string
      required:
        - username
    GeneralMessageResponse:
      type: object
      properties:
        message:
          type: string
          nullable: true
        code:
          type: integer
          nullable: true
      required:
        - message
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
paths:
  /auth/oidc/providers:
    get:
      responses:
        '200':
          description: This generates a list of available OIDC providers
          $ref: '#/components/responses/GeneralMessageWithOIDCProvidersResponse'
        <<: *commonErrors
  /auth/oidc/token-handler:
    get:
      responses:
        '200':
          description: This is where the cli will post the ID token from the OIDC provider
        <<: *commonErrors
      summary: Generic ID Token handler to be exchanged for a Pigeonhole token

  /secret:
    delete:
      description: Delete all the users secrets
      parameters:
        - in: query
          name: reference
          required: false
          schema:
            type: string
      responses:
        '204':
          description: Delete on a resource is successful
        <<: *commonErrors
      security:
        - BearerAuth: []
      tags:
        - secret
    get:
      description: Get my secrets
      parameters:
        - in: query
          name: reference
          required: false
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Secrets'
          description: Successfully retrieved items
        <<: *commonErrors
      security:
        - BearerAuth: []
      summary: Get my secrets
      tags:
        - key
    post:
      description: Generates a presigned url
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSecret'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/CreateSecretResponse'
        <<: *commonErrors
      security:
        - BearerAuth: []
      tags:
        - key
        - user
  /secret/{secret_id}:
    delete:
      description: Delete a particular secret
      summary: Delete a particular secret
      parameters:
        - in: path
          name: secret_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved items
        <<: *commonErrors
      security:
        - BearerAuth: []
      tags:
        - secret
    get:
      description: Get a secret by id or reference
      parameters:
        - in: path
          name: secret_id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Secret'
          description: Successfully retrieved items
        <<: *commonErrors
      security:
        - BearerAuth: []
      summary: Get secret by id or shortcode. This will include the presignedurl
      tags:
        - key
  /secret/{secret_id}/download:
    get:
      description: Redirects the request to the S3 presigned URL for download
      parameters:
        - in: path
          name: secret_id
          required: true
          schema:
            type: string
      responses:
        '307':
          description: Redirect to the file download URL
        <<: *commonErrors
      security:
        - BearerAuth: []
      tags:
        - secret
  /user:
    get:
      description: Retrieve a list of users given a query e.g. user email, shortcode or id
      parameters:
        - in: query
          name: id
          required: false
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          $ref: '#/components/responses/Users'
          description: Successfully retrieved users
        <<: *commonErrors
      security:
        - BearerAuth: []
      summary: Retrieve all items from the given schema
      tags:
        - user
  /user/me:
    get:
      description: Get my user object
      responses:
        '200':
          $ref: '#/components/responses/GeneralMessageWithUserResponse'
          description: Successfully retrieved items
        <<: *commonErrors
      security:
        - BearerAuth: []
      summary: Get my user object
      tags:
        - user
  /user/me/rotate-shortcode:
    post:
      description: Rotate users short code to remain anonymous
      responses:
        '204':
          description: Successfully rotated shortcode
        <<: *commonErrors
      security:
        - BearerAuth: []
      summary: Get my user object
      tags:
        - user
  /user/me/key:
    get:
      description: Get my user object
      responses:
        '200':
          $ref: '#/components/responses/GeneralResponseWithKeys'
          description: Successfully retrieved items
        <<: *commonErrors
      security:
        - BearerAuth: []
      summary: Get my user object
      tags:
        - user
        - key
    post:
      description: Create new keys
      responses:
        '201':
          $ref: '#/components/responses/Key'
          description: Successfully uploaded key
        <<: *commonErrors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewKey'
      security:
        - BearerAuth: []
      summary: Get my user object
      tags:
        - user
        - key
  /user/me/key/validate/{thumbprint}:
    get:
      description: Get users key by thumbprint
      parameters:
        - in: path
          name: thumbprint
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved items
        '404':
          description: No key found
        <<: *commonErrors
      security:
        - BearerAuth: []
      summary: Get my user object
      tags:
        - user
        - key
  /user/{user_id}:
    get:
      description: Get users' keys
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved items
          $ref: '#/components/responses/User'
        <<: *commonErrors
      security:
        - BearerAuth: []
      summary: Get my user object
      tags:
        - user
  /user/{user_id}/key:
    get:
      description: Get users' keys
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Return a list of keys
          $ref: '#/components/responses/Keys'
        <<: *commonErrors
      security:
        - BearerAuth: []
      summary: Get my user object
      tags:
        - key
    post:
      description: r
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewKey'
        required: true
      responses:
        '201':
          description: OK
      security:
        - BearerAuth: []
      tags:
        - key
        - user
  /user/{user_id}/key/{key_id}/key:
    delete:
      description: r
      parameters:
        - in: path
          name: key_id
          required: true
          schema:
            type: string
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
        required: true
      responses:
        '200':
          description: OK
        <<: *commonErrors
      security:
        - BearerAuth: []
      tags:
        - key
        - user
    get:
      description: r
      parameters:
        - in: path
          name: key_id
          required: true
          schema:
            type: string
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
        required: true
      responses:
        '200':
          description: OK
        <<: *commonErrors
      security:
        - BearerAuth: []
      tags:
        - key
        - user
  /user/{user_id}/public:
    get:
      description: Either a users email or id to retrieve public information
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved items
        <<: *commonErrors
      summary: Retrieve all public information about a user
      tags:
        - user